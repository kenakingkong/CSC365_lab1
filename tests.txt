// CSC 365. Spring 2019
// Lab 1-1 test suite

// TC-1
// Tests Requirements R3, R4
// short form command name, existing student
// expected output: HAVIR,BOBBIE,2,108,HAMER,GAVIN
S HAVIR

// TC-2
// Tests Requirements R3, R4
// long form command name, existing student
// expected output: HAVIR,BOBBIE,2,108,HAMER,GAVIN
Student HAVIR

// TC-3
// Tests Requirements R3, R4
// short form command name, non-existing student
// expected output: "Student not found"
S NEMO

// TC-4
// Tests Requirements R3,R5
// long form command names, existing student
// expected output: BEX TAMESHA 55
Student Bex Bus

// TC-5
// Tests Requirements R3,R5
// short form command names, existing student
// expected output: BEX TAMESHA 55
S BEX B

// TC-6
// Tests Requirements R3,R5
// short form command name, non-existing student
// expected output: "Student not found"
S NEMO B

// TC-7
// Tests Requirements R3, R6
// short form command name, existing teacher
// expected output: WOOLERY NOLAN \n VILARDO EMMANUEL
T STEIB

// TC-8
// Tests Requirements R3, R6
// long form command name, existing teacher
// expected output: WOOLERY NOLAN \n VILARDO EMMANUEL
Teacher steib

// TC-9
// Tests Requirements R3, R6
// long form command name, existing teacher
// expected output: "Teacher not found"
T VonDollen

// TC-10
// Tests Requirements R3, R8
// short form command name, existing bus route
// expected output:
//      SHARRI       SWEDLUND      3        107
//     ELLIOTT     ZAPPAVIGNA      6        106
//     NUMBERS  SAENPHIMMACHA      6        111
//         WAN         BOYTER      6        102
//      BUSTER         KOZOLA      2        108
//     DEWAYNE      DEMARTINI      6        102
//     TAMESHA            BEX      4        105
//        LEON          WERST      6        111
//        TAMA         LAMKIN      6        111
B 55

// TC-11
// Tests Requirements R3, R8
// long form command name, existing bus route
// expected output:
//      SHARRI       SWEDLUND      3        107
//     ELLIOTT     ZAPPAVIGNA      6        106
//     NUMBERS  SAENPHIMMACHA      6        111
//         WAN         BOYTER      6        102
//      BUSTER         KOZOLA      2        108
//     DEWAYNE      DEMARTINI      6        102
//     TAMESHA            BEX      4        105
//        LEON          WERST      6        111
//        TAMA         LAMKIN      6        111
Bus 55

// TC-12
// Tests Requirements R3, R8
// short form command name, non-existing bus route
// expected output: "Bus Route not found"
B 1

// TC-13
// Tests Requirements: R3, R7
// short form command name, existing grade
// expected output: "SAELEE, DANILO\nGARTH, JOHN"
G 1

// TC-14
// Tests Requirements: R3, R7
// short form command name, non-existing grade
// expected output: "Grade does not exist"
G 42

// TC-15
// Tests Requirements: R3, R7
// long form command name, existing grade
// expected output: "SAELEE, DANILO\nGARTH, JOHN"
Grade 1

// TC-15
// Tests Requirements: R3, R9
// short form command name, existing grade, High
// expected output: "GARTH,JOHN,1,103,0,3.14,FALKER,ADOLPH"
G 1 High

// TC-16
// Tests Requirements: R3, R9
// short form command name, existing grade, H
// expected output: "GARTH,JOHN,1,103,0,3.14,FALKER,ADOLPH"
G 1 H

// TC-17
// Tests Requirements: R3, R9
// short form command name, existing grade, Low
// expected output: "SAELEE,DANILO,1,103,54,2.85,FALKER,ADOLPH"
G 1 Low

// TC-18
// Tests Requirements: R3, R9
// short form command name, existing grade, L
// expected output: "SAELEE,DANILO,1,103,54,2.85,FALKER,ADOLPH"
G 1 L

// TC-19
// Tests Requirements: R3, R9
// short form command name, non-existing grade, Low
// expected output: "Grade Not Found"
G 42 Low

// TC-20
// Tests Requirements: R3, R10
// short form command name, existing grade
// expected output: "2, 2.95"
A 2

// TC-21
// Tests Requirements: R3, R10
// long form command name, existing grade
// expected output: "2, 2.95"
Average 2

// TC-22
// Tests Requirements R3, R10
// short form command name, non-existing grade
// expected output: "Grade not found"
A 42

// TC-23
// Tests Requirements: R3, R11
// short form command name
// expected output:
// 1     2
// 2    13
// 3     9
// 4    15
// 6    21
I

// TC-24
// Tests Requirements: R3, R11
// long form command name
// expected output:
// 1     2
// 2    13
// 3     9
// 4    15
// 6    21
Info

//TC-25
// Tests Requirements R3, R13
// long form quit command
// expected output: program terminates
Quit

//TC-26
// Tests Requirements R3, R13
// short form quit command
// expected output: program terminates
Q

// TC-
// Tests Requirements: R3, NR3
// long form grade command, long form teacher option
// expected output:
// COOL REUBEN
// HANTZ JED
// CHIONCHIO PERLA
Grade 4 Teachers

// TC-
// Tests Requirements: R3, NR3
// long form grade command, short form teacher option
// expected output:
// COOL REUBEN
// HANTZ JED
// CHIONCHIO PERLA
Grade 4 T

// TC-
// Tests Requirements: R3, NR4
// long form enrollment command
// expected output:
// 101          1
// 102          5
// 103          2
// 104          2
// 105          6
// 106          2
// 107          7
// 108         11
// 109          5
// 110          2
// 111          9
// 112          8
Enrollment

// TC-
// Tests Requirements: R3, NR4
// short form enrollment command
// expected output:
// 101          1
// 102          5
// 103          2
// 104          2
// 105          6
// 106          2
// 107          7
// 108         11
// 109          5
// 110          2
// 111          9
// 112          8
E



/*ANALYTICS SECTION*/

// TC -
// Test Requirements: R5
// access advanced search command
// expected output
// ***ADVANCED SEARCH***
// Usage (case sensitive):
//  1. Grade|Teacher|Bus <grade |Teacher last name | bus route>
//   Get the Average GPA by specified Grade, Teacher or Bus Route
//2. Grade|Teacher|Bus ALL SORT
//   Get Average GPAs of each Grade, Teacher or Bus sorted descendingly by GPA or by category by default
// 3. ALL
//    Get all GPAs sorted descendingly
// 4. EXIT
//   Return to regular commands
advanced

// TC -
// Test Requirements: R5
// function: (1) get average gpa of grade
// command grade, grade number existing
// expected output: 2.946....
Grade 2

// TC -
// Test Requirements: R5
// function: (1) get average gpa of grade
// command grade, grade number non-existing
// expected output: 9 not found
Grade 9

// TC -
// Test Requirements: R5
// function: (1) get average gpa of teacher
// command teacher, teacher last name existing
// expected output: 3.0142857142857147
Teacher FARFARD

// TC -
// Test Requirements: R5
// function: (1) get average gpa of teacher
// command teacher, teacher last name non-existing
// expected output: VONDOLLEN not found
Teacher VONDOLLEN

// TC -
// Test Requirements: R5
// function: (1) get average gpa of bus routes
// command bus, bus number existing
// expected output: 2.885
Bus 52

// TC -
// Test Requirements: R5
// function: (1) get average gpa of bus routes
// command bus, bus number non existing
// expected output: 150 not Found
Bus 150

// TC -
// Test Requirements: R5
// function: (2) get average gpa of each grade, sorted by grade level
// command grade, all
// expected output:
// Grade
// 1    2.995000
// 2    2.946154
// 3    3.048889
// 4    2.951333
// 6    2.977143
Grade ALL

// TC -
// Test Requirements: R5
// function: (2) get average gpa of each grade, sorted by GPA descending
// command grade, all, sort
// expected output:
// Grade
// 3    3.048889
// 1    2.995000
// 6    2.977143
// 4    2.951333
// 2    2.946154
Grade ALL SORT

// TC -
// Test Requirements: R5
// function (2) get average gpa of each teacher, sorted by teacher names
// command Teacher, all
// expected output:
// TLastName
// ALPERT        3.170000
// BODZIONY      3.090000
// CHIONCHIO     2.985000
// COOL          2.910000
// FAFARD        3.014286
// FALKER        2.995000
// GAMBREL       2.960000
// HAMER         2.954545
// HANTZ         2.913333
// KERBS         2.976000
// NISTENDIRK    2.962222
// STEIB         2.900000
Teacher ALL

// TC -
// Test Requirements: R5
// function (2) get average gpa of each teacher, sorted by gpa
// command Teacher, all, sort
// expected output:
// TLastName
// ALPERT        3.170000
// BODZIONY      3.090000
// FAFARD        3.014286
// FALKER        2.995000
// CHIONCHIO     2.985000
// KERBS         2.976000
// NISTENDIRK    2.962222
// GAMBREL       2.960000
// HAMER         2.954545
// HANTZ         2.913333
// COOL          2.910000
// STEIB         2.900000
Teacher ALL SORT

// Test Requirements: R5
// function (2) get average gpa of each bus, sorted by bus number
// command bus, all
// expected output:
// Bus
// 0     2.952500
// 51    3.020000
// 52    2.885000
// 53    3.055556
// 54    2.941667
// 55    3.036667
// 56    2.921667
Bus ALL

// Test Requirements: R5
// function (2) get average gpa of each bus, sorted by gpa
// command bus, all, sort
// expected output:
// Bus
// 53    3.055556
// 55    3.036667
// 51    3.020000
// 0     2.952500
// 54    2.941667
// 56    2.921667
// 52    2.885000
Bus ALL SORT

// TC -
// Test Requirements: R5
// function(3): get all records sorted by gpa descending
// command ALL
// expected output:
// StLastName StFirstName  Grade  Classroom  Bus   GPA   TLastName TFirstName
// 2        SWEDLUND      SHARRI      3        107   55  3.24      FAFARD      ROCIO
// 27         LAMKIN        TAMA      6        111   55  3.23  NISTENDIRK      NANCY
// 29     THEUNISSEN       GRACE      3        110   54  3.23      ALPERT   JONATHAN
// 40       WICINSKY      TERESE      2        108   53  3.22       HAMER      GAVIN
// 26          WERST        LEON      6        111   55  3.22  NISTENDIRK      NANCY
// 7     SCHOENECKER      PHUONG      6        109    0  3.15     GAMBREL        JAE
// 47     ZAPPAVIGNA     ELLIOTT      6        106   55  3.15    BODZIONY        LUZ
// .... and the rest of the records that I didn't want to put
ALL

// TC -
// Test Requirements: R5
// function (4) exit advanced search back to regular search
// command exit
// expected output:
//
// *** LEAVING ADVANCED SEARCH ***
//
// Search:
EXIT
